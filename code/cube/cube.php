<?php /* *  Â© OSIREM *   *  ecoin-ECN *  Cube.php*//* Abstract - */$ACK_TYPE_BLOCK = 1;$ACK_TYPE_SHARE = 2;$ACK_TYPE_VOTE = 3;$ACK_TYPE_PLEDGE = 4;$ACK_TYPE_REF = 5;$ACK_TYPE_TOTAL = 6;class CubeShare{	public $m_ID;	public $m_Score = 0;	public $m_Owner = "";	public $m_Amount = 0.0;};class CubeTier{	public $m_Level = 0;	public $m_vec_Share = array();	public $m_idx_vec_Share = 0;};class CubePeer{	public $m_vec_Share = array();	public $m_idx_vec_Share = 0;	public $m_Owner = "";	public $m_Amount = 0.0;};class CubePayee{	public $m_ID;	public $m_TXID;	public $m_etxTierID;	public $m_etxOwner = "";	public $m_payOwner = "";	public $m_TradePerc = 0.0;	public $m_FloatAmount = 0.0;	public $m_Height = 0;};class etxAmount{	public $m_ID;	public $m_propOwner = "";	public $m_propAmount = 0.0;	public $m_Amount = 0.0;	public $m_Owner = "";	public $m_Tier;};class etxTier{	public $m_ID;	public $m_TXID;	public $m_BuyCost = 0.0;	public $m_BuyNow = 0.0;	public $m_Percent = 0.0;	public $m_LevelOn = 0;	public $m_Height = 0;	public $m_Status = 0;	public function acSolve($f_etxAmount)		{		for($f_Helly = 0; $f_Helly < m_idx_vec_Peer; $f_Helly++)			{			$f_Peer = &$m_Peer[$f_Helly];			if($f_Peer->m_Owner == $f_Owner)				{				return $f_Peer;				}			}		echo "ECN::ADVWARN::Peer not found using owner = " . $f_Owner;		$f_Peer = &$m_Peer[0];		return $f_Peer;		}			public function acSearchPayee()		{		  ////////////		 // etx		// payee search		$fullquery = "SELECT id, transactionid, etxowner, payowner, tierid, tradeperc, fltamt, height FROM payee WHERE tierid = " . $m_ID;		$payees = $database->get_results($fullquery);		//$f_Index = 0;		//$f_ShareContainer = new ShareContainer();				foreach($payees as $payee)			{			$f_Payee = new CubePayee();			$f_Payee->m_ID = $share["id"];			$f_Payee->m_TXID = $share["transactionid"];			$f_Payee->m_etxTierID = $share["etxowner"];			$f_Payee->m_etxOwner = $share["etxowner"];			$f_Payee->m_payOwner = $share["payowner"];			$f_Payee->m_TradePerc = $share["tradeperc"];			$f_Payee->m_FloatAmount = $share["fltamt"];			$f_Payee->m_Height = $share["height"];						$m_vec_Payee[$m_idx_vec_Payee] = $f_Payee;			$m_idx_vec_Payee++;			}		}};class ShareContainer{	public $m_vec_Peer = array();	public $m_idx_vec_Peer = 0;};function acPeerfromOwner(&$f_ShareContainer, $f_Owner){	for($f_Helly = 0; $f_Helly < $f_ShareContainer->m_idx_vec_Peer; $f_Helly++)		{		$f_Peer = &$f_ShareContainer->m_vec_Peer[$f_Helly];		if($f_Peer->m_Owner == $f_Owner)			{			return $f_Peer;			}		}	echo "ECN::ADVWARN::Peer not found using owner = " . $f_Owner;	$f_Peer = &$f_ShareContainer->m_Peer[0];	return $f_Peer;}function ag_etxTierSolve($f_Owner, &$f_propAmt, &$database){	   ////////////	  // Rewards	 // Full Count	// Tier Based Payment Rewards	$fullquery = "SELECT id, payowner, tierid, tradeperc, fltamt, height FROM tier WHERE owner = " . $f_Owner;	$payees = $database->get_results($fullquery);	//$f_Index = 0;	//$f_ShareContainer = new ShareContainer();		foreach($payees as $payee)		{		$f_ShareStr = $share["owner"];				$f_Found = false;		for($f_IntSearch = 0; $f_IntSearch < $f_ShareContainer->m_idx_vec_Peer; $f_IntSearch++)			{			if($f_ShareStr == $f_ShareContainer->m_vec_Peer[$f_IntSearch]->m_Owner)				{				$f_Found = true;				$f_Index = $f_IntSearch;				}			}		if($f_Found == false)			{			$f_CPeer = new CubePeer();			$f_CPeer->m_Owner = $share["owner"];						$f_CShare = new CubeShare();			$f_CShare->m_Owner = $share["owner"];			$f_CShare->m_ID = $share["id"];			$f_CShare->m_Score = $share["score"];						$f_CPeer->m_vec_Share[$f_CPeer->m_idx_vec_Share] = $f_CShare;			$f_CPeer->m_idx_vec_Share++;						$f_ShareContainer->m_vec_Peer[$f_ShareContainer->m_idx_vec_Peer] = $f_CPeer;			$f_ShareContainer->m_idx_vec_Peer++;			}		else			{			$f_CShare = new CubeShare();			$f_CShare->m_Owner = $share["owner"];			$f_CShare->m_ID = $share["id"];			$f_CShare->m_Score = $share["score"];						$f_ShareContainer->m_vec_Peer[$f_Index]->m_vec_Share[$f_ShareContainer->m_vec_Peer[$f_Index]->m_idx_vec_Share] = $f_CShare;			$f_ShareContainer->m_vec_Peer[$f_Index]->m_idx_vec_Share++;			}		}	return $f_ShareContainer;}function ag_BuildPeerGraph($f_JobID, &$database){	   ////////////	  // Rewards	 // Full Count	// Tier Based Payment Rewards	$fullquery = "SELECT id, owner, score FROM share WHERE jobid = " . $f_JobID;	$shares = $database->get_results($fullquery);	$f_Index = 0;	$f_ShareContainer = new ShareContainer();		foreach($shares as $share)		{		$f_ShareStr = $share["owner"];				$f_Found = false;		for($f_IntSearch = 0; $f_IntSearch < $f_ShareContainer->m_idx_vec_Peer; $f_IntSearch++)			{			if($f_ShareStr == $f_ShareContainer->m_vec_Peer[$f_IntSearch]->m_Owner)				{				$f_Found = true;				$f_Index = $f_IntSearch;				}			}		if($f_Found == false)			{			$f_CPeer = new CubePeer();			$f_CPeer->m_Owner = $share["owner"];						$f_CShare = new CubeShare();			$f_CShare->m_Owner = $share["owner"];			$f_CShare->m_ID = $share["id"];			$f_CShare->m_Score = $share["score"];						$f_CPeer->m_vec_Share[$f_CPeer->m_idx_vec_Share] = $f_CShare;			$f_CPeer->m_idx_vec_Share++;						$f_ShareContainer->m_vec_Peer[$f_ShareContainer->m_idx_vec_Peer] = $f_CPeer;			$f_ShareContainer->m_idx_vec_Peer++;			}		else			{			$f_CShare = new CubeShare();			$f_CShare->m_Owner = $share["owner"];			$f_CShare->m_ID = $share["id"];			$f_CShare->m_Score = $share["score"];						$f_ShareContainer->m_vec_Peer[$f_Index]->m_vec_Share[$f_ShareContainer->m_vec_Peer[$f_Index]->m_idx_vec_Share] = $f_CShare;			$f_ShareContainer->m_vec_Peer[$f_Index]->m_idx_vec_Share++;			}		}	return $f_ShareContainer;}	function ag_BuildVecTier(&$f_ShareContainer){	$f_vec_Tier = array();	$f_idx_vec_Tier = 0;	$f_Common0 = new CubeTier();	$f_vec_Tier[$f_idx_vec_Tier] = &$f_Common0;	$f_idx_vec_Tier++;	for($f_Helly = 0; $f_Helly < $f_ShareContainer->m_idx_vec_Peer; $f_Helly++)		{		for($f_Jet = 0; $f_Jet < $f_ShareContainer->m_vec_Peer[$f_Helly]->m_idx_vec_Share; $f_Jet++)			{			$f_CubeShare = &$f_ShareContainer->m_vec_Peer[$f_Helly]->m_vec_Share[$f_Jet];			if($f_CubeShare->m_Score == 0)				{				$f_Common0->m_vec_Share[$f_Common0->m_idx_vec_Share] = $f_CubeShare;				$f_Common0->m_idx_vec_Share++;				}			else				{				if($f_idx_vec_Tier <= 1)					{					$f_Tier = new CubeTier();					$f_vec_Tier[$f_idx_vec_Tier] = $f_Tier;					$f_vec_Tier[$f_idx_vec_Tier]->m_vec_Share[$f_vec_Tier[$f_idx_vec_Tier]->m_idx_vec_Share] = $f_CubeShare;					$f_vec_Tier[$f_idx_vec_Tier]->m_idx_vec_Share++;					$f_idx_vec_Tier++;					}				else					{					$f_Found = false;					for($f_Scan = 0; $f_Scan < $f_idx_vec_Tier; $f_Scan++)						{						if($f_Found == false)							{							$f_ScanTier = &$f_vec_Tier[$f_Scan];							if($f_ScanTier->m_idx_vec_Share >= 1)								{								if($f_ScanTier->m_vec_Share[0]->m_Score == $f_CubeShare->m_Score)									{									$f_ScanTier->m_vec_Share[$f_ScanTier->m_idx_vec_Share] = $f_CubeShare;									$f_ScanTier->m_idx_vec_Share++;									$f_Found = true;									$f_Scan = $f_idx_vec_Tier;									}								else if($f_ScanTier->m_vec_Share[0]->m_Score > $f_CubeShare->m_Score)									{									$f_Tier = new CubeTier();									  ////////									 // Array									// re-Order									$f_vec_Tier[$f_idx_vec_Tier] = $f_vec_Tier[$f_idx_vec_Tier - 1];									$f_idx_vec_Tier++;									for($f_i = $f_Scan; $f_i < ($f_idx_vec_Tier - 1); $f_i++)										{										$f_vec_Tier[$f_i + 1] = $f_vec_Tier[$f_i];										}									$f_vec_Tier[$f_Scan] = $f_Tier;									$f_Tier->m_vec_Share[$f_Tier->m_idx_vec_Share] = $f_CubeShare;									$f_Tier->m_idx_vec_Share++;									$f_Found = true;									$f_Scan = $f_idx_vec_Tier;									}								}							}						}					if(!$f_Found)						{						$f_Tier = new CubeTier();						$f_Tier->m_vec_Share[$f_Tier->m_idx_vec_Share] = $f_CubeShare;						$f_Tier->m_idx_vec_Share++;						$f_vec_Tier[$f_idx_vec_Tier] = $f_Tier;						$f_idx_vec_Tier++;						}					}				}			}		}	  ///////////	 // Totals	//	$f_block_reward = 50.0;	$f_block_winreward = 25.0;	for($f_tid = $f_idx_vec_Tier - 1; $f_tid >= 0; $f_tid--)		{		$f_share_reward = $f_block_winreward / $f_vec_Tier[$f_tid]->m_idx_vec_Share;		for($f_aid = 0; $f_aid < $f_vec_Tier[$f_tid]->m_idx_vec_Share; $f_aid++)			{			$f_vec_Tier[$f_tid]->m_vec_Share[$f_aid]->m_Amount = $f_share_reward;			}		$f_block_winreward /= 2.0;		}	return true;}	  //////////////////////////	 // Calc for Owner Peer	//function ag_CalcOwnerGenesisTX($f_Owner, $f_JobID, &$database){	$f_ShareContainer = ag_BuildPeerGraph($f_JobID, $database);	ag_BuildVecTier($f_ShareContainer);	$f_ShareCounter = 0;	$f_Amount = 0.0;	$f_ownerPeer = acPeerfromOwner($f_ShareContainer, $f_Owner);	for($f_shrid = 0; $f_shrid < $f_ownerPeer->m_idx_vec_Share; $f_shrid++)		{		$f_CBShare = $f_ownerPeer->m_vec_Share[$f_shrid];		$f_Amount += $f_CBShare->m_Amount;		$f_ShareCounter++;		}	return $f_Amount;}   ///////////////////////  // Cube Transact // Usefull Genesis Coin// Full-Trust Transactionfunction ag_makeGenesisCoin($f_MinerIdentity, $f_JobID, &$osidb){	  /////////////////////	 // Block Found!	// Increment JobID	$f_JobID++;		$fieldvalue = array(		'status' => 1,		'locktime' => 1,		'confirmation' => 0,		'hdid' => $f_MinerIdentity,		'shareid' => 0,		'gnshareid' => 2,		'jobid' => $f_JobID,		'hash' => "GenesisCoin",		'amt' => 1.0,		'owner' => $f_MinerIdentity);	$query = "SELECT id FROM transactions WHERE jobid = " . $f_JobID . " AND hash = 'GenesisCoin'";	$count_result_query = $osidb->num_rows($query);	if($count_result_query == 0)		{		$osidb->insert('transactions', $fieldvalue);				$select_row_trx = $osidb->get_row($query);				$txinfieldvalue = array(			'transactionid' => $select_row_trx[0],			'vout' => "Genesis Coin",			'pubkey' => "GenesisCoin",			'vsign' => "GenesisCoin",			'amt' => 1.0,			'gnshareid' => 2);					$osidb->insert('txin', $txinfieldvalue);				$txoutfieldvalue = array(			'transactionid' => $select_row_trx[0],			'adrid' => 1,			'owner' => $f_MinerIdentity,			'pubkey' => "GenesisCoin",			'txoutamt' => 1.0,			'owneramt' => 1.0);					$osidb->insert('txout', $txoutfieldvalue);		}}?>